学习知识 第二章pandas基础
https://datawhalechina.github.io/joyful-pandas/build/html/%E7%9B%AE%E5%BD%95/ch2.html






二.2  
DataFrame 在 Series 的基础上增加了列索引，一个数据框可以由二维的 data 与行列索引来构造：
In [30]: data = [[1, 'a', 1.2], [2, 'b', 2.2], [3, 'c', 3.2]]

In [31]: df = pd.DataFrame(data = data,
   ....:                   index = ['row_%d'%i for i in range(3)],
   ....:                   columns=['col_0', 'col_1', 'col_2'])
   ....: 

In [32]: df
Out[32]: 
       col_0 col_1  col_2
row_0      1     a    1.2
row_1      2     b    2.2
row_2      3     c    3.2

ps.  In [31]中 index写法  %d指输入类型 连接后面的i


三.4
练一练

在 clip 中，超过边界的只能截断为边界值，如果要把超出边界的替换为自定义的值，应当如何做？
s = pd.Series([-1, 1.2345, 100, -50])

In [82]: s.clip(0, 2) # 前两个数分别表示上下截断边界
Out[82]: 
0    0.0000
1    1.2345
2    2.0000
3    0.0000
dtype: float64

函数为DataFrame.clip(lower=None, upper=None, axis=None, inplace=False, *args, **kwargs)
lower ： float或array_like，默认为None
最小阈值。低于此阈值的所有值都将设置为它。

upper ： float或array_like，默认为None
最大阈值。高于此阈值的所有值都将设置为它。

axis ： int或string轴名称，可选
沿给定轴将对象与下部和上部对齐。

inplace ： 布尔值，默认为False
是否对数据执行操作。
*args，** kwargs
其他关键字没有效果，但可以接受与numpy的兼容性。

ps.函数中未找到相关问题解决办法，想到使用mask解决问题，与后面口袋妖怪问题中相同
#mask可连用

解答:
s = pd.Series([-1, 1.2345, 100, -50])
s.mask(s<0,10).mask(s>99,120)
0     10.0000
1      1.2345
2    120.0000
3     10.0000
dtype: float64


四.1
练一练
rolling 对象的默认窗口方向都是向前的，某些情况下用户需要向后的窗口，例如对1,2,3设定向后窗口为2的 sum 操作，结果为3,5,NaN，此时应该如何实现向后的滑窗操作？

将list转为[3,1,2]然后做以rolling(2)做sum  （不知道对不对）


四.2
练一练
cummax返回逐项累计求和的最大值

s = pd.Series([1, 3, -1])

s.expanding().sum()
0    1.0
1    4.0
2    3.0
dtype: float64

s.expanding().sum().max()
4.0





Ex1：口袋妖怪数据集
现有一份口袋妖怪的数据集，下面进行一些背景说明：

# 代表全国图鉴编号，不同行存在相同数字则表示为该妖怪的不同状态

妖怪具有单属性和双属性两种，对于单属性的妖怪， Type 2 为缺失值

Total, HP, Attack, Defense, Sp. Atk, Sp. Def, Speed 分别代表种族值、体力、物攻、防御、特攻、特防、速度，其中种族值为后6项之和

In [116]: df = pd.read_csv('data/pokemon.csv')

In [117]: df.head(3)
Out[117]: 
   #       Name Type 1  Type 2  Total  HP  Attack  Defense  Sp. Atk  Sp. Def  Speed
0  1  Bulbasaur  Grass  Poison    318  45      49       49       65       65     45
1  2    Ivysaur  Grass  Poison    405  60      62       63       80       80     60
2  3   Venusaur  Grass  Poison    525  80      82       83      100      100     80


对 HP, Attack, Defense, Sp. Atk, Sp. Def, Speed 进行加总，验证是否为 Total 值。
对于 # 重复的妖怪只保留第一条记录，解决以下问题：
求第一属性的种类数量和前三多数量对应的种类
求第一属性和第二属性的组合种类
求尚未出现过的属性组合


按照下述要求，构造 Series ：
取出物攻，超过120的替换为 high ，不足50的替换为 low ，否则设为 mid

df['Attack'].mask(df['Attack']>120, 'high'
   ....:                  ).mask(df['Attack']<50, 'low').mask((50<=df['Attack']
   ....:                  )&(df['Attack']<=120), 'mid').head()
与练一练中做法一致



取出第一属性，分别用 replace 和 apply 替换所有字母为大写
df['Type 1'].apply(lambda x:str.upper(x)).head()

ps.str.upper(x)函数


求每个妖怪六项能力的离差，即所有能力中偏离中位数最大的值，添加到 df 并从大到小排序



Ex2：指数加权窗口
作为扩张窗口的 ewm 窗口

在扩张窗口中，用户可以使用各类函数进行历史的累计指标统计，但这些内置的统计函数往往把窗口中的所有元素赋予了同样的权重。事实上，可以给出不同的权重来赋给窗口中的元素，指数加权窗口就是这样一种特殊的扩张窗口。

其中，最重要的参数是 alpha ，它决定了默认情况下的窗口权重为 wi=(1−α)i,i∈{0,1,...,t} ，其中 i=t 表示当前元素， i=0 表示序列的第一个元素。

从权重公式可以看出，离开当前值越远则权重越小，若记原序列为 x ，更新后的当前元素为 yt ，此时通过加权公式归一化后可知：

yt=∑ti=0wixt−i∑ti=0wi=xt+(1−α)xt−1+(1−α)2xt−2+...+(1−α)tx01+(1−α)+(1−α)2+...+(1−α)t
对于 Series 而言，可以用 ewm 对象如下计算指数平滑后的序列：
In [118]: np.random.seed(0)

In [119]: s = pd.Series(np.random.randint(-1,2,30).cumsum())

In [120]: s.head()
Out[120]: 
0   -1
1   -1
2   -2
3   -2
4   -2
dtype: int32

In [121]: s.ewm(alpha=0.2).mean().head()
Out[121]: 
0   -1.000000
1   -1.000000
2   -1.409836
3   -1.609756
4   -1.725845
dtype: float64

请用 expanding 窗口实现。

2.作为滑动窗口的 ewm 窗口

从第1问中可以看到， ewm 作为一种扩张窗口的特例，只能从序列的第一个元素开始加权。现在希望给定一个限制窗口 n ，只对包含自身的最近的 n 个元素作为窗口进行滑动加权平滑。请根据滑窗函数，给出新的 wi 与 yt 的更新公式，并通过 rolling 窗口实现这一功能。



练习答案见
https://datawhalechina.github.io/joyful-pandas/build/html/%E7%9B%AE%E5%BD%95/%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88.html
